/*1. Write an SQL query to retrieve a list of all orders along with customer information (e.g.,
customer name) for each order.*/

SELECT Orders.OrderID, Orders.OrderDate, Orders.TotalAmount, CONCAT(Customers.FirstName, ' ', Customers.LastName) AS CustomerName, 
Customers.Email, Customers.Phone, Customers.Address FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

/*2. Write an SQL query to find the total revenue generated by each electronic gadget product.
Include the product name and the total revenue.*/

SELECT Products.ProductName, SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID GROUP BY Products.ProductID, Products.ProductName
ORDER BY TotalRevenue DESC;

/*3. Write an SQL query to list all customers who have made at least one purchase. Include their
names and contact information.*/

SELECT DISTINCT Customers.CustomerID, CONCAT(Customers.FirstName, ' ', Customers.LastName) AS CustomerName, 
Customers.Email, Customers.Phone, Customers.Address FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

SELECT Customers.CustomerID, CONCAT(Customers.FirstName, ' ', Customers.LastName) AS CustomerName, 
Customers.Email, Customers.Phone, Customers.Address,COUNT(Orders.OrderID) AS TotalOrders
FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID
GROUP BY Customers.CustomerID HAVING COUNT(Orders.OrderID) >0;

/*4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest
total quantity ordered. Include the product name and the total quantity ordered.*/

SELECT Products.ProductName, SUM(OrderDetails.Quantity) AS TotalQuantityOrdered FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID GROUP BY Products.ProductName
ORDER BY TotalQuantityOrdered DESC LIMIT 1;

/*5. Write an SQL query to retrieve a list of electronic gadgets along with their corresponding
categories.*/

ALTER TABLE Products ADD COLUMN Category VARCHAR(50);
UPDATE Products SET Category = 'Computing Devices' WHERE ProductID IN (1, 2, 6, 7);
UPDATE Products SET Category = 'Accessories' WHERE ProductID IN (3, 4, 5, 11, 12,13);
UPDATE Products SET Category = 'Display' WHERE ProductID IN (8, 10);
UPDATE Products SET Category = 'Printing' WHERE ProductID = 9;
SELECT ProductName, Category FROM Products ORDER BY Category;

/*6. Write an SQL query to calculate the average order value for each customer. Include the
customer's name and their average order value.*/

SELECT CONCAT(C.FirstName, ' ', C.LastName) AS CustomerName, 
AVG(O.TotalAmount) AS AverageOrderValue FROM Customers C
LEFT JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerID, CustomerName
ORDER BY AverageOrderValue DESC;

/*7. Write an SQL query to find the order with the highest total revenue. Include the order ID,
customer information, and the total revenue.*/

SELECT O.OrderID, CONCAT(C.FirstName, ' ', C.LastName) AS CustomerName, C.Email, C.Phone, 
O.TotalAmount AS TotalRevenue FROM Orders O JOIN Customers C ON O.CustomerID = C.CustomerID
ORDER BY O.TotalAmount DESC LIMIT 1;

/*8. Write an SQL query to list electronic gadgets and the number of times each product has been
ordered.*/

SELECT p.ProductName, SUM(od.Quantity) AS TotalOrders FROM 
OrderDetails od JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductName ORDER BY TotalOrders DESC;

/*9. Write an SQL query to find customers who have purchased a specific electronic gadget product.
Allow users to input the product name as a parameter.*/
 
SELECT DISTINCT c.CustomerID, CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName, c.Email, c.Phone, c.Address
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Speakers';

/*10. Write an SQL query to calculate the total revenue generated by all orders placed within a
specific time period. Allow users to input the start and end dates as parameters.*/

SELECT SUM(TotalAmount) AS Total_Revenue
FROM Orders
WHERE OrderDate BETWEEN '2024-03-01' AND '2024-03-10';





